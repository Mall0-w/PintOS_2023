            +--------------------+
            | CSCC69             |
            | PROJECT 1: THREADS |
            | DESIGN DOCUMENT    |
            +--------------------+
   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Justin Wang <justinx.wang@mail.utoronto.ca>
Jahin Promit <jahin.promit@mail.utoronto.ca>
Kyle Lewis <kyle.lewis@mail.utoronto.ca>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

                 ALARM CLOCK
                 ===========

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct thread:

    int64_t awake_time;  /* Time that thread will wake up. */

---- ALGORITHMS ----

>> A2: Briefly describe what happens in a call to timer_sleep(),
>> including the effects of the timer interrupt handler.

timer_sleep:
-Calculates the awake_time of the current thread using the current timer_ticks and the sleep ticks.
-Disables interrupts.
-Inserts the current thread into a sorted list of asleep threads.
-Blocks the current thread.
-Reenables interrupts at the old interrupt level.

Timer interrupt handler:
Every interrupt increments the ticks and checks if any of the threads in the asleep threads list need to be awakened. If so, awakens the threads.


>> A3: What steps are taken to minimize the amount of time spent in
>> the timer interrupt handler?

The list of asleep threads is always sorted (on insert) so only the beginning of the list needs to be checked for threads that need to be awakened.

---- SYNCHRONIZATION ----

>> A4: How are race conditions avoided when multiple threads call
>> timer_sleep() simultaneously?

Interrupts are disabled during the critical section of timer_sleep().

>> A5: How are race conditions avoided when a timer interrupt occurs
>> during a call to timer_sleep()?

Interrupts are disabled during the critical section of timer_sleep() so timer interrupt will just not execute.

---- RATIONALE ----

>> A6: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design has the best time complexity. We considered a design where the list of asleep threads was sorted every interrupt in order to find the threads that need to be awakened. That method has worse efficiency as a lot of time is spent on the sort.

             PRIORITY SCHEDULING
             ===================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to struct lock 
    
    struct list_elem elem;              /* List element. */

Added to struct thread

    int effective_priority;             /* Priority accounting for donations */
    struct lock *blocking_lock;         /* Lock that is blocking thread */
    struct list owned_locks;            /* List of locks the thread owns */


>> B2: Explain the data structure used to track priority donation.
>> Use ASCII art to diagram a nested donation.  (Alternately, submit a
>> .png file.)

      A --- T2
    /
T1 ---B --- T3
    \
      C --- T4

Threads:                            Locks       Blocked By
T1 (priority 10, e-priority 15)     A, B, C
T2 (priority 15, e-priority 15)                 A
T3 (priority 11, e-priority 11)                 B
T4 (priority 13, e-priority 13)                 C

Note that instead of an actual data structure, we used recursion to pass the priorities up/down.

---- ALGORITHMS ----

>> B3: How do you ensure that the highest priority thread waiting for
>> a lock, semaphore, or condition variable wakes up first?

Every sema_up and cond_signal the waiters of the given semaphore/condition are sorted. As for locks, each thread keeps track of their effective_priority which is the highest priority they are "responsible" for, between its own priority and the priority of threads that are locked by it.

>> B4: Describe the sequence of events when a call to lock_acquire()
>> causes a priority donation.  How is nested donation handled?

A function is called that iteratively "ascends" upwards from lock -> lock holder -> lock -> lock holder -> ... until either the max depth limit is reached or it reached a thread that is not locked. As it iterates, its keeping track of the highest thread priority seen so far and updating all the threads' effective_priority values to this highest priority value. With this algorithm, priorities are being donated upwards as the function iterates. A higher priority function that is lower down on the lock-lockholder chain will have it's priority donated upwards to a medium priority function and a lower priority function up the chain.

>> B5: Describe the sequence of events when lock_release() is called
>> on a lock that a higher-priority thread is waiting for.

A function is called that will remove the lock from the current thread's owned_locks list and update the current thread's effective_priority accordingly (just in case the removed lock was blocking a thread who's donated priority was the current thread's effective priority). Subsequently, the highest priority thread waiting on the lock is unblocked and put in the ready list.

---- SYNCHRONIZATION ----

>> B6: Describe a potential race in thread_set_priority() and explain
>> how your implementation avoids it.  Can you use a lock to avoid
>> this race?

The thread is locked during the critical section of thread_set_priority().

---- RATIONALE ----

>> B7: Why did you choose this design?  In what ways is it superior to
>> another design you considered?

This design is relatively efficient with very minimal critical sections of code.

We considered using an actual data structure to store the priorities of all the threads but we realized that because we were required to only implement priority donation for locks which are only a one-to-one relationship between threads, it would be simpler to just iterate up a chain to go through the relavent priorities and a data structure like a self-balancing tree would be overkill.

              ADVANCED SCHEDULER
              ==================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Suppose threads A, B, and C have nice values 0, 1, and 2.  Each
>> has a recent_cpu value of 0.  Fill in the table below showing the
>> scheduling decision and the priority and recent_cpu values for each
>> thread after each given number of timer ticks:

timer  recent_cpu    priority   thread
ticks   A   B   C   A   B   C   to run
-----  --  --  --  --  --  --   ------
 0
 4
 8
12
16
20
24
28
32
36

>> C3: Did any ambiguities in the scheduler specification make values
>> in the table uncertain?  If so, what rule did you use to resolve
>> them?  Does this match the behavior of your scheduler?

>> C4: How is the way you divided the cost of scheduling between code
>> inside and outside interrupt context likely to affect performance?

---- RATIONALE ----

>> C5: Briefly critique your design, pointing out advantages and
>> disadvantages in your design choices.  If you were to have extra
>> time to work on this part of the project, how might you choose to
>> refine or improve your design?

>> C6: The assignment explains arithmetic for fixed-point math in
>> detail, but it leaves it open to you to implement it.  Why did you
>> decide to implement it the way you did?  If you created an
>> abstraction layer for fixed-point math, that is, an abstract data
>> type and/or a set of functions or macros to manipulate fixed-point
>> numbers, why did you do so?  If not, why not?

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students, either for future quarters or the remaining projects?

>> Any other comments?
