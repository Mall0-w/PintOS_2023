       	     +-------------------------+
             | CSCC69                  |
             | PROJECT 4: FILE SYSTEMS |
             | DESIGN DOCUMENT         |
             +-------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Justin Wang <justinx.wang@mail.utoronto.ca>
Jahin Promit <jahin.promit@mail.utoronto.ca>
Kyle Lewis <kyle.lewis@mail.utoronto.ca>

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course staff.

             INDEXED AND EXTENSIBLE FILES
             ============================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

Added to
struct inode_disk
  {
    block_sector_t direct[MAX_DIRECT_SECTORS]; // Stores direct sectors of the file so it is easy to access
    block_sector_t indirect; // Stores indirect pointer to direct sectors
    block_sector_t dub_indirect; // Stores indirect pointer, which allows access to direct sectors
  };


>> A2: What is the maximum size of a file supported by your inode
>> structure?  Show your work. 
    Each inode can have 124 direct blocks, 1 indirect block, and 1 doubly indirect block.
    We defined each indirect block to contain 128 sectors, so each sector
    points to a direct sector. Similarily, since each doubly indirect block
    points to an indirect block which contains 128 indirect pointers, each
    of the pointers pointing to 128 direct sectors, we can have 128^2 direct sectors
    from the doubly indirect block.
    This means that we can have 124 + 128 + 128^2 = 16636 blocks. 
    Each block is 512 bytes, so we can have 16636 * 512 bytes ~= 8 MB.
    However, we must consider the metadata that is stored in the inode.
    Which lines up with the FAQ answer being that an individual file 
    will be smaller than the file system partition minus the metadata 
    which is 8mb.


---- SYNCHRONIZATION ----

>> A3: Explain how your code avoids a race if two processes attempt to
>> extend a file at the same time.
There's a lock which prevents two processes from extending the file at the same time. 
The lock is acquired before the file is extended and released after the file is extended. 
This ensures that only one process can extend the file at a time.

>> A4: Suppose processes A and B both have file F open, both
>> positioned at end-of-file.  If A reads and B writes F at the same
>> time, A may read all, part, or none of what B writes.  However, A
>> may not read data other than what B writes, e.g. if B writes
>> nonzero data, A is not allowed to see all zeros.  Explain how your
>> code avoids this race.
We have a lock during extending during writing, which prevents reading 
when writing is happening. This ensures that the reading process will
not read data that is being written to. For reading, a lock was added so 
you cannot extend the file while reading. This ensures that the reading
process will not read data that is being extended.

>> A5: Explain how your synchronization design provides "fairness".
>> File access is "fair" if readers cannot indefinitely block writers
>> or vice versa.  That is, many processes reading from a file cannot
>> prevent forever another process from writing the file, and many
>> processes writing to a file cannot prevent another process forever
>> from reading the file.

---- RATIONALE ----

>> A6: Is your inode structure a multilevel index?  If so, why did you
>> choose this particular combination of direct, indirect, and doubly
>> indirect blocks?  If not, why did you choose an alternative inode
>> structure, and what advantages and disadvantages does your
>> structure have, compared to a multilevel index?

It is a multilevel index. The combination of maximizing the number of direct blocks 
allows us to store more data in the inode itself. This is because the inode is a fixed size,
so not maximizing it just wastes space. The indirect and doubly indirect blocks are used to
store the rest of the data, where the indirect block stores pointers to the direct blocks
and the doubly indirect block stores pointers to the indirect blocks. This allows us to store
more data than if we just used direct blocks.


                SUBDIRECTORIES
                ==============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> B2: Describe your code for traversing a user-specified path.  How
>> do traversals of absolute and relative paths differ?

---- SYNCHRONIZATION ----

>> B4: How do you prevent races on directory entries?  For example,
>> only one of two simultaneous attempts to remove a single file
>> should succeed, as should only one of two simultaneous attempts to
>> create a file with the same name, and so on.

>> B5: Does your implementation allow a directory to be removed if it
>> is open by a process or if it is in use as a process's current
>> working directory?  If so, what happens to that process's future
>> file system operations?  If not, how do you prevent it?

---- RATIONALE ----

>> B6: Explain why you chose to represent the current directory of a
>> process the way you did.

                 BUFFER CACHE
                 ============

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

---- ALGORITHMS ----

>> C2: Describe how your cache replacement algorithm chooses a cache
>> block to evict.

>> C3: Describe your implementation of write-behind.

>> C4: Describe your implementation of read-ahead.

---- SYNCHRONIZATION ----

>> C5: When one process is actively reading or writing data in a
>> buffer cache block, how are other processes prevented from evicting
>> that block?

>> C6: During the eviction of a block from the cache, how are other
>> processes prevented from attempting to access the block?

---- RATIONALE ----

>> C7: Describe a file workload likely to benefit from buffer caching,
>> and workloads likely to benefit from read-ahead and write-behind.

               SURVEY QUESTIONS
               ================

Answering these questions is optional, but it will help us improve the
course in future quarters.  Feel free to tell us anything you
want--these questions are just to spur your thoughts.  You may also
choose to respond anonymously in the course evaluations at the end of
the quarter.

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the TAs to more effectively assist
>> students in future quarters?

>> Any other comments?
